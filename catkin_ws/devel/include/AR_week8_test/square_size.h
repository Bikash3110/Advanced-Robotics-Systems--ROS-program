// Generated by gencpp from file AR_week8_test/square_size.msg
// DO NOT EDIT!


#ifndef AR_WEEK8_TEST_MESSAGE_SQUARE_SIZE_H
#define AR_WEEK8_TEST_MESSAGE_SQUARE_SIZE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace AR_week8_test
{
template <class ContainerAllocator>
struct square_size_
{
  typedef square_size_<ContainerAllocator> Type;

  square_size_()
    : size(0.0)  {
    }
  square_size_(const ContainerAllocator& _alloc)
    : size(0.0)  {
  (void)_alloc;
    }



   typedef double _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::AR_week8_test::square_size_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AR_week8_test::square_size_<ContainerAllocator> const> ConstPtr;

}; // struct square_size_

typedef ::AR_week8_test::square_size_<std::allocator<void> > square_size;

typedef boost::shared_ptr< ::AR_week8_test::square_size > square_sizePtr;
typedef boost::shared_ptr< ::AR_week8_test::square_size const> square_sizeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::AR_week8_test::square_size_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::AR_week8_test::square_size_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::AR_week8_test::square_size_<ContainerAllocator1> & lhs, const ::AR_week8_test::square_size_<ContainerAllocator2> & rhs)
{
  return lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::AR_week8_test::square_size_<ContainerAllocator1> & lhs, const ::AR_week8_test::square_size_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace AR_week8_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::AR_week8_test::square_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::AR_week8_test::square_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AR_week8_test::square_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::AR_week8_test::square_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AR_week8_test::square_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::AR_week8_test::square_size_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::AR_week8_test::square_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3aa6cfa06a5f47b42010d9cec2c18e56";
  }

  static const char* value(const ::AR_week8_test::square_size_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3aa6cfa06a5f47b4ULL;
  static const uint64_t static_value2 = 0x2010d9cec2c18e56ULL;
};

template<class ContainerAllocator>
struct DataType< ::AR_week8_test::square_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "AR_week8_test/square_size";
  }

  static const char* value(const ::AR_week8_test::square_size_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::AR_week8_test::square_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 size\n"
;
  }

  static const char* value(const ::AR_week8_test::square_size_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::AR_week8_test::square_size_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct square_size_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AR_week8_test::square_size_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::AR_week8_test::square_size_<ContainerAllocator>& v)
  {
    s << indent << "size: ";
    Printer<double>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AR_WEEK8_TEST_MESSAGE_SQUARE_SIZE_H
